#!/usr/bin/env node
const {ApolloServer, gql} = require('apollo-server-express')
const {MongoClient, ObjectId} = require('mongodb')
const typeDefs = require('../graphql/typeDefs');
const resolversFunc = require('../graphql/resolvers');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('gql-mongo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
const MONGO_URL = 'mongodb://localhost:27017/blog';

var server = http.createServer(app);

  try {
    // const db = await MongoClient.connect(MONGO_URL, { useUnifiedTopology: true },(err, client)=>{
   MongoClient.connect(MONGO_URL, { useUnifiedTopology: true },(err, client)=>{
      const db = client.db('blog');
      const Posts = db.collection('posts')
      const Comments = db.collection('comments')
      const resolvers = resolversFunc(Posts, Comments)

      var port = normalizePort(process.env.PORT || '3000');
      app.set('port', port);

      /**
       * Create HTTP server.
       */

      const apollo = new ApolloServer({ typeDefs, resolvers });
      apollo.applyMiddleware({ app });
      /**
       * Listen on provided port, on all network interfaces.
       */

      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);

    })
  } catch (e) {
    console.log(e);
  } finally {

  }
// }
// start()
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`open http://localhost:${addr.port}`);
}
